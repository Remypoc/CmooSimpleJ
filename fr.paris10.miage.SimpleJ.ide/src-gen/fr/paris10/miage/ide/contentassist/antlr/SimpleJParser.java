/*
 * generated by Xtext 2.10.0
 */
package fr.paris10.miage.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.paris10.miage.ide.contentassist.antlr.internal.InternalSimpleJParser;
import fr.paris10.miage.services.SimpleJGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SimpleJParser extends AbstractContentAssistParser {

	@Inject
	private SimpleJGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSimpleJParser createParser() {
		InternalSimpleJParser result = new InternalSimpleJParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAccesAccess().getAlternatives(), "rule__Acces__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getClasseAccess().getGroup(), "rule__Classe__Group__0");
					put(grammarAccess.getClasseAccess().getGroup_2(), "rule__Classe__Group_2__0");
					put(grammarAccess.getClasseAccess().getGroup_2_2(), "rule__Classe__Group_2_2__0");
					put(grammarAccess.getClasseAccess().getGroup_4(), "rule__Classe__Group_4__0");
					put(grammarAccess.getClasseAccess().getGroup_5(), "rule__Classe__Group_5__0");
					put(grammarAccess.getAttributAccess().getGroup(), "rule__Attribut__Group__0");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup(), "rule__Methode__Group__0");
					put(grammarAccess.getMethodeAccess().getGroup_2(), "rule__Methode__Group_2__0");
					put(grammarAccess.getMethodeAccess().getGroup_3(), "rule__Methode__Group_3__0");
					put(grammarAccess.getMethodeAccess().getGroup_3_2(), "rule__Methode__Group_3_2__0");
					put(grammarAccess.getModelAccess().getClassesAssignment_0(), "rule__Model__ClassesAssignment_0");
					put(grammarAccess.getModelAccess().getProgramAssignment_1(), "rule__Model__ProgramAssignment_1");
					put(grammarAccess.getClasseAccess().getNameAssignment_1(), "rule__Classe__NameAssignment_1");
					put(grammarAccess.getClasseAccess().getAttributsAssignment_2_1(), "rule__Classe__AttributsAssignment_2_1");
					put(grammarAccess.getClasseAccess().getAttributsAssignment_2_2_1(), "rule__Classe__AttributsAssignment_2_2_1");
					put(grammarAccess.getClasseAccess().getParentAssignment_4_1(), "rule__Classe__ParentAssignment_4_1");
					put(grammarAccess.getClasseAccess().getMethodesAssignment_5_0(), "rule__Classe__MethodesAssignment_5_0");
					put(grammarAccess.getClasseAccess().getMethodesAssignment_5_1(), "rule__Classe__MethodesAssignment_5_1");
					put(grammarAccess.getAttributAccess().getAccesAssignment_0(), "rule__Attribut__AccesAssignment_0");
					put(grammarAccess.getAttributAccess().getDelegueAssignment_1(), "rule__Attribut__DelegueAssignment_1");
					put(grammarAccess.getAttributAccess().getNameAssignment_2(), "rule__Attribut__NameAssignment_2");
					put(grammarAccess.getAttributAccess().getTypeAssignment_4(), "rule__Attribut__TypeAssignment_4");
					put(grammarAccess.getTypeAccess().getNameAssignment(), "rule__Type__NameAssignment");
					put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
					put(grammarAccess.getProgramAccess().getContenuAssignment_2(), "rule__Program__ContenuAssignment_2");
					put(grammarAccess.getMethodeAccess().getNameAssignment_1(), "rule__Methode__NameAssignment_1");
					put(grammarAccess.getMethodeAccess().getTypeAssignment_2_1(), "rule__Methode__TypeAssignment_2_1");
					put(grammarAccess.getMethodeAccess().getAttributsAssignment_3_1(), "rule__Methode__AttributsAssignment_3_1");
					put(grammarAccess.getMethodeAccess().getAttributsAssignment_3_2_1(), "rule__Methode__AttributsAssignment_3_2_1");
					put(grammarAccess.getMethodeAccess().getContenuAssignment_4(), "rule__Methode__ContenuAssignment_4");
					put(grammarAccess.getDelegationAccess().getNameAssignment(), "rule__Delegation__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSimpleJParser typedParser = (InternalSimpleJParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimpleJGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimpleJGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
