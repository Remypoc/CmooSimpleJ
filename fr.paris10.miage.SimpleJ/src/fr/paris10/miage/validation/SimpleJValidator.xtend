/*
 * generated by Xtext 2.10.0
 */
package fr.paris10.miage.validation

import org.eclipse.xtext.validation.Check
import fr.paris10.miage.simpleJ.Classe
import fr.paris10.miage.simpleJ.SimpleJPackage
import fr.paris10.miage.simpleJ.Attribut
import java.util.List
import java.util.ArrayList
import java.util.Arrays
import fr.paris10.miage.simpleJ.Model
import java.util.Set

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SimpleJValidator extends AbstractSimpleJValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					SimpleJPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	List<String> typesAccepte = new ArrayList<String>(Arrays.asList("int", "String", "double", "boolean"));

	/* Contient tous les types acceptés */ 
	Set<String> allTypes; 
	
	/* Permet de récupérer tous les types acceptés */
	@Check
	def checkTest(Model model) {
		allTypes =  model.eResource.allContents.filter(typeof(Classe)).map[name].toSet; 
		allTypes.addAll(typesAccepte);
	}
	
	public static val ERROR_NAME = "invalidName"
	
	/* Check si le nom d'une classe commence bien par une majuscule */
	@Check(FAST)
	def checkClassStartWithUpper(Classe classe) {
		if(!Character.isUpperCase(classe.name.charAt(0))) {
			warning("Le nom d'une classe doit commencer par une majuscule !", SimpleJPackage.Literals.CLASSE__NAME , ERROR_NAME)
		}
	}
	
	/* Check si le nom d'un attribut commence bien par une minuscule */
	@Check(FAST)
	def checkClassStartWithLower(Attribut attribut) {
		if(Character.isUpperCase(attribut.name.charAt(0))) {
			warning("Le nom d'un attribut doit commencer par une minuscule !", SimpleJPackage.Literals.ATTRIBUT__NAME , ERROR_NAME)
		}
	}
	
	/* Check si le type d'une variable est bien valide */
	@Check(NORMAL)
	def checkAttibutType(Attribut attribut) {
		if(!allTypes.contains(attribut.type.name)) {
			error("Type inconnu !", SimpleJPackage.Literals.ATTRIBUT__TYPE , ERROR_NAME)
		}
	}
	
	/* Vérifie si le nom d'une super classe est référencé */
	/*@Check(NORMAL)
	def checkExtendedClassType(Classe classe) {
		if(classe.herite != null) {
			if(!allTypes.contains(classe.herite)) {
				error("Type inconnu !", SimpleJPackage.Literals.CLASSE__HERITE , ERROR_NAME)
			}
		}
	}*/
}
