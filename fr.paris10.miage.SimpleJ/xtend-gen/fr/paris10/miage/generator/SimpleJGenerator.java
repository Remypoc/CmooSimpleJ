/**
 * generated by Xtext 2.10.0
 */
package fr.paris10.miage.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import fr.paris10.miage.simpleJ.Acces;
import fr.paris10.miage.simpleJ.Attribut;
import fr.paris10.miage.simpleJ.Classe;
import fr.paris10.miage.simpleJ.Delegation;
import fr.paris10.miage.simpleJ.Methode;
import fr.paris10.miage.simpleJ.Program;
import fr.paris10.miage.simpleJ.Type;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SimpleJGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Program> _filter = Iterators.<Program>filter(_allContents, Program.class);
    final Set<Program> programs = IteratorExtensions.<Program>toSet(_filter);
    for (final Program program : programs) {
      String _name = program.getName();
      String _plus = (_name + ".java");
      String _name_1 = program.getName();
      String _contenu = program.getContenu();
      CharSequence _genererMain = this.genererMain(_name_1, _contenu);
      fsa.generateFile(_plus, _genererMain);
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterator<Classe> _filter_1 = Iterators.<Classe>filter(_allContents_1, Classe.class);
    final Set<Classe> classes = IteratorExtensions.<Classe>toSet(_filter_1);
    for (final Classe classe : classes) {
      String _name_2 = classe.getName();
      String _plus_1 = (_name_2 + ".java");
      String _name_3 = classe.getName();
      String _genererAttributs = this.genererAttributs(resource, classe);
      String _genererMethode = this.genererMethode(classe);
      CharSequence _genererJava = this.genererJava(_name_3, _genererAttributs, classe, _genererMethode);
      fsa.generateFile(_plus_1, _genererJava);
    }
  }
  
  public CharSequence genererJava(final String nom, final String attributs, final Classe classe, final String methodes) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    _builder.append(nom, "");
    _builder.append(" ");
    CharSequence _genererHeritage = this.genererHeritage(classe);
    _builder.append(_genererHeritage, "");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(attributs, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(methodes, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String genererAttributs(final Resource resource, final Classe classe) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Attribut> _attributs = classe.getAttributs();
      for(final Attribut attribut : _attributs) {
        _builder.append("private ");
        Type _type = attribut.getType();
        String _name = _type.getName();
        _builder.append(_name, "");
        _builder.append(" ");
        String _name_1 = attribut.getName();
        _builder.append(_name_1, "");
        _builder.append("; //");
        Acces _acces = attribut.getAcces();
        _builder.append(_acces, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    CharSequence _genererConstructeur = this.genererConstructeur(classe);
    _builder.append(_genererConstructeur, "");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribut> _attributs_1 = classe.getAttributs();
      for(final Attribut attribut_1 : _attributs_1) {
        CharSequence _genererGetterSetter = this.genererGetterSetter(attribut_1);
        _builder.append(_genererGetterSetter, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  /**
   * public «classe.name»(«FOR attribut : classe.attributs SEPARATOR', '»«ENDFOR») {
   * 
   * «FOR attribut : classe.attributs» this.«attribut.name» = «attribut.name»; «ENDFOR»
   * 
   * «««classe.attributs.map[type.name + " " + name].join(', ')
   * «««genererConstructeurParent(classe)»
   */
  public CharSequence genererConstructeur(final Classe classe) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    String _name = classe.getName();
    _builder.append(_name, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence genererConstructeurParent(final Classe classe) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Classe _parent = classe.getParent();
      boolean _notEquals = (!Objects.equal(_parent, null));
      if (_notEquals) {
        _builder.append("super(");
        Classe _parent_1 = classe.getParent();
        EList<Attribut> _attributs = _parent_1.getAttributs();
        final Function1<Attribut, String> _function = (Attribut it) -> {
          return it.getName();
        };
        List<String> _map = ListExtensions.<Attribut, String>map(_attributs, _function);
        String _join = IterableExtensions.join(_map, ", ");
        _builder.append(_join, "");
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  public CharSequence genererGetterSetter(final Attribut attribut) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Acces _acces = attribut.getAcces();
      boolean _equals = Objects.equal(_acces, Acces.ACCESS_VAR);
      if (_equals) {
        CharSequence _genererGetter = this.genererGetter(attribut);
        _builder.append(_genererGetter, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        CharSequence _genererSetter = this.genererSetter(attribut);
        _builder.append(_genererSetter, "");
        _builder.newLineIfNotEmpty();
      } else {
        Acces _acces_1 = attribut.getAcces();
        boolean _equals_1 = Objects.equal(_acces_1, Acces.ACCESS_CONST);
        if (_equals_1) {
          CharSequence _genererGetter_1 = this.genererGetter(attribut);
          _builder.append(_genererGetter_1, "");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genererGetter(final Attribut attribut) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public ");
    Type _type = attribut.getType();
    String _name = _type.getName();
    _builder.append(_name, "");
    _builder.append(" get");
    String _name_1 = attribut.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_2 = attribut.getName();
    _builder.append(_name_2, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genererSetter(final Attribut attribut) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public void set");
    String _name = attribut.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("(");
    Type _type = attribut.getType();
    String _name_1 = _type.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    String _name_2 = attribut.getName();
    _builder.append(_name_2, "");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("this.");
    String _name_3 = attribut.getName();
    _builder.append(_name_3, "\t");
    _builder.append(" = ");
    String _name_4 = attribut.getName();
    _builder.append(_name_4, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genererHeritage(final Classe classe) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Classe _parent = classe.getParent();
      boolean _notEquals = (!Objects.equal(_parent, null));
      if (_notEquals) {
        _builder.append("extends ");
        Classe _parent_1 = classe.getParent();
        String _name = _parent_1.getName();
        _builder.append(_name, "");
        _builder.append(" ");
      }
    }
    return _builder;
  }
  
  public CharSequence genererMain(final String titre, final String contenu) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    _builder.append(titre, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(contenu, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String genererMethode(final Classe classe) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<Methode> _methodes = classe.getMethodes();
      for(final Methode methode : _methodes) {
        _builder.append("public ");
        {
          Type _type = methode.getType();
          boolean _notEquals = (!Objects.equal(_type, null));
          if (_notEquals) {
            Type _type_1 = methode.getType();
            String _name = _type_1.getName();
            _builder.append(_name, "");
          } else {
            _builder.append("void");
          }
        }
        _builder.append(" ");
        String _name_1 = methode.getName();
        _builder.append(_name_1, "");
        _builder.append("(");
        EList<Attribut> _attributs = methode.getAttributs();
        final Function1<Attribut, String> _function = (Attribut it) -> {
          Type _type_2 = it.getType();
          String _name_2 = _type_2.getName();
          String _plus = (_name_2 + " ");
          String _name_3 = it.getName();
          return (_plus + _name_3);
        };
        List<String> _map = ListExtensions.<Attribut, String>map(_attributs, _function);
        String _join = IterableExtensions.join(_map, ", ");
        _builder.append(_join, "");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _contenu = methode.getContenu();
        _builder.append(_contenu, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      EList<Attribut> _attributs_1 = classe.getAttributs();
      for(final Attribut attribut : _attributs_1) {
        {
          Delegation _delegue = attribut.getDelegue();
          boolean _notEquals_1 = (!Objects.equal(_delegue, null));
          if (_notEquals_1) {
            Type _type_2 = attribut.getType();
            String _name_2 = _type_2.getName();
            _builder.append(_name_2, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
}
