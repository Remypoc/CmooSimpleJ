/*
 * generated by Xtext 2.10.0
 */
package fr.paris10.miage.serializer;

import com.google.inject.Inject;
import fr.paris10.miage.services.SimpleJGrammarAccess;
import fr.paris10.miage.simpleJ.Attribut;
import fr.paris10.miage.simpleJ.Classe;
import fr.paris10.miage.simpleJ.Model;
import fr.paris10.miage.simpleJ.Program;
import fr.paris10.miage.simpleJ.SimpleJPackage;
import fr.paris10.miage.simpleJ.Type;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SimpleJSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleJGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimpleJPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpleJPackage.ATTRIBUT:
				sequence_Attribut(context, (Attribut) semanticObject); 
				return; 
			case SimpleJPackage.CLASSE:
				sequence_Classe(context, (Classe) semanticObject); 
				return; 
			case SimpleJPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SimpleJPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case SimpleJPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribut returns Attribut
	 *
	 * Constraint:
	 *     (acces=Acces name=ID type=Type)
	 */
	protected void sequence_Attribut(ISerializationContext context, Attribut semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleJPackage.Literals.ATTRIBUT__ACCES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleJPackage.Literals.ATTRIBUT__ACCES));
			if (transientValues.isValueTransient(semanticObject, SimpleJPackage.Literals.ATTRIBUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleJPackage.Literals.ATTRIBUT__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleJPackage.Literals.ATTRIBUT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleJPackage.Literals.ATTRIBUT__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributAccess().getAccesAccesEnumRuleCall_0_0(), semanticObject.getAcces());
		feeder.accept(grammarAccess.getAttributAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Classe returns Classe
	 *
	 * Constraint:
	 *     (name=ID (attributs+=Attribut attributs+=Attribut*)? parent=[Classe|ID]?)
	 */
	protected void sequence_Classe(ISerializationContext context, Classe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((classes+=Classe+ program=Program) | program=Program)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleJPackage.Literals.PROGRAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleJPackage.Literals.PROGRAM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleJPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleJPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
