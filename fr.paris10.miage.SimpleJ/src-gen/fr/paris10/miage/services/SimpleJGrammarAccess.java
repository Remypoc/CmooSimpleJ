/*
 * generated by Xtext 2.10.0
 */
package fr.paris10.miage.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimpleJGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassesClasseParserRuleCall_0_0 = (RuleCall)cClassesAssignment_0.eContents().get(0);
		private final Assignment cProgramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_1_0 = (RuleCall)cProgramAssignment_1.eContents().get(0);
		
		//Model:
		//	classes+=Classe*
		//	program=Program?;
		@Override public ParserRule getRule() { return rule; }
		
		//classes+=Classe* program=Program?
		public Group getGroup() { return cGroup; }
		
		//classes+=Classe*
		public Assignment getClassesAssignment_0() { return cClassesAssignment_0; }
		
		//Classe
		public RuleCall getClassesClasseParserRuleCall_0_0() { return cClassesClasseParserRuleCall_0_0; }
		
		//program=Program?
		public Assignment getProgramAssignment_1() { return cProgramAssignment_1; }
		
		//Program
		public RuleCall getProgramProgramParserRuleCall_1_0() { return cProgramProgramParserRuleCall_1_0; }
	}
	public class ClasseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Classe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributsAttributParserRuleCall_2_1_0 = (RuleCall)cAttributsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAttributsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAttributsAttributParserRuleCall_2_2_1_0 = (RuleCall)cAttributsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cParentClasseCrossReference_4_1_0 = (CrossReference)cParentAssignment_4_1.eContents().get(0);
		private final RuleCall cParentClasseIDTerminalRuleCall_4_1_0_1 = (RuleCall)cParentClasseCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMethodesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMethodesMethodeParserRuleCall_5_0_0 = (RuleCall)cMethodesAssignment_5_0.eContents().get(0);
		private final Assignment cMethodesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMethodesMethodeParserRuleCall_5_1_0 = (RuleCall)cMethodesAssignment_5_1.eContents().get(0);
		
		/// *
		// * herite=[Classe]
		// * A lieu de faire un validator pour s'assurer que le nom de classe hérité existe.
		// * On défini notre attribut hérite comme une référence vers une classe, on ne pourra ainsi accéder qu'aux classe définies
		// * dans le fichier de test.
		// * 
		// * / Classe:
		//	"class" name=ID ("(" attributs+=Attribut (',' attributs+=Attribut)*) ")"? (":" parent=[Classe])? (methodes+=Methode
		//	methodes+=Methode*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"class" name=ID ("(" attributs+=Attribut (',' attributs+=Attribut)*) ")"? (":" parent=[Classe])? (methodes+=Methode
		//methodes+=Methode*)?
		public Group getGroup() { return cGroup; }
		
		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("(" attributs+=Attribut (',' attributs+=Attribut)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//attributs+=Attribut
		public Assignment getAttributsAssignment_2_1() { return cAttributsAssignment_2_1; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_2_1_0() { return cAttributsAttributParserRuleCall_2_1_0; }
		
		//(',' attributs+=Attribut)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//attributs+=Attribut
		public Assignment getAttributsAssignment_2_2_1() { return cAttributsAssignment_2_2_1; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_2_2_1_0() { return cAttributsAttributParserRuleCall_2_2_1_0; }
		
		//")"?
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(":" parent=[Classe])?
		public Group getGroup_4() { return cGroup_4; }
		
		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//parent=[Classe]
		public Assignment getParentAssignment_4_1() { return cParentAssignment_4_1; }
		
		//[Classe]
		public CrossReference getParentClasseCrossReference_4_1_0() { return cParentClasseCrossReference_4_1_0; }
		
		//ID
		public RuleCall getParentClasseIDTerminalRuleCall_4_1_0_1() { return cParentClasseIDTerminalRuleCall_4_1_0_1; }
		
		//(methodes+=Methode methodes+=Methode*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//methodes+=Methode
		public Assignment getMethodesAssignment_5_0() { return cMethodesAssignment_5_0; }
		
		//Methode
		public RuleCall getMethodesMethodeParserRuleCall_5_0_0() { return cMethodesMethodeParserRuleCall_5_0_0; }
		
		//methodes+=Methode*
		public Assignment getMethodesAssignment_5_1() { return cMethodesAssignment_5_1; }
		
		//Methode
		public RuleCall getMethodesMethodeParserRuleCall_5_1_0() { return cMethodesMethodeParserRuleCall_5_1_0; }
	}
	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Attribut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccesAccesEnumRuleCall_0_0 = (RuleCall)cAccesAssignment_0.eContents().get(0);
		private final Assignment cDelegueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegueDelegationParserRuleCall_1_0 = (RuleCall)cDelegueAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//Attribut:
		//	acces=Acces? delegue=Delegation? name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//acces=Acces? delegue=Delegation? name=ID ":" type=Type
		public Group getGroup() { return cGroup; }
		
		//acces=Acces?
		public Assignment getAccesAssignment_0() { return cAccesAssignment_0; }
		
		//Acces
		public RuleCall getAccesAccesEnumRuleCall_0_0() { return cAccesAccesEnumRuleCall_0_0; }
		
		//delegue=Delegation?
		public Assignment getDelegueAssignment_1() { return cDelegueAssignment_1; }
		
		//Delegation
		public RuleCall getDelegueDelegationParserRuleCall_1_0() { return cDelegueDelegationParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Type:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContenuAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContenuSTRINGTerminalRuleCall_2_0 = (RuleCall)cContenuAssignment_2.eContents().get(0);
		
		//Program:
		//	"program" name=ID
		//	contenu=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"program" name=ID contenu=STRING
		public Group getGroup() { return cGroup; }
		
		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//contenu=STRING
		public Assignment getContenuAssignment_2() { return cContenuAssignment_2; }
		
		//STRING
		public RuleCall getContenuSTRINGTerminalRuleCall_2_0() { return cContenuSTRINGTerminalRuleCall_2_0; }
	}
	public class MethodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Methode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributsAttributParserRuleCall_3_1_0 = (RuleCall)cAttributsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cAttributsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cAttributsAttributParserRuleCall_3_2_1_0 = (RuleCall)cAttributsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cContenuAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContenuSTRINGTerminalRuleCall_4_0 = (RuleCall)cContenuAssignment_4.eContents().get(0);
		
		//Methode:
		//	"def" name=ID (":" type=Type)? ("(" attributs+=Attribut (',' attributs+=Attribut)* ")")?
		//	contenu=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"def" name=ID (":" type=Type)? ("(" attributs+=Attribut (',' attributs+=Attribut)* ")")? contenu=STRING
		public Group getGroup() { return cGroup; }
		
		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(":" type=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
		
		//("(" attributs+=Attribut (',' attributs+=Attribut)* ")")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//attributs+=Attribut
		public Assignment getAttributsAssignment_3_1() { return cAttributsAssignment_3_1; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_3_1_0() { return cAttributsAttributParserRuleCall_3_1_0; }
		
		//(',' attributs+=Attribut)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//attributs+=Attribut
		public Assignment getAttributsAssignment_3_2_1() { return cAttributsAssignment_3_2_1; }
		
		//Attribut
		public RuleCall getAttributsAttributParserRuleCall_3_2_1_0() { return cAttributsAttributParserRuleCall_3_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//contenu=STRING
		public Assignment getContenuAssignment_4() { return cContenuAssignment_4; }
		
		//STRING
		public RuleCall getContenuSTRINGTerminalRuleCall_4_0() { return cContenuSTRINGTerminalRuleCall_4_0; }
	}
	public class DelegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Delegation");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Delegation:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	public class AccesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.paris10.miage.SimpleJ.Acces");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAccessVarEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAccessVarVarKeyword_0_0 = (Keyword)cAccessVarEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAccessConstEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAccessConstConstKeyword_1_0 = (Keyword)cAccessConstEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAccessHiddenEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAccessHiddenHiddenKeyword_2_0 = (Keyword)cAccessHiddenEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Acces:
		//	accessVar="var" | accessConst="const" | accessHidden="hidden";
		public EnumRule getRule() { return rule; }
		
		//accessVar="var" | accessConst="const" | accessHidden="hidden"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//accessVar="var"
		public EnumLiteralDeclaration getAccessVarEnumLiteralDeclaration_0() { return cAccessVarEnumLiteralDeclaration_0; }
		
		//"var"
		public Keyword getAccessVarVarKeyword_0_0() { return cAccessVarVarKeyword_0_0; }
		
		//accessConst="const"
		public EnumLiteralDeclaration getAccessConstEnumLiteralDeclaration_1() { return cAccessConstEnumLiteralDeclaration_1; }
		
		//"const"
		public Keyword getAccessConstConstKeyword_1_0() { return cAccessConstConstKeyword_1_0; }
		
		//accessHidden="hidden"
		public EnumLiteralDeclaration getAccessHiddenEnumLiteralDeclaration_2() { return cAccessHiddenEnumLiteralDeclaration_2; }
		
		//"hidden"
		public Keyword getAccessHiddenHiddenKeyword_2_0() { return cAccessHiddenHiddenKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final ClasseElements pClasse;
	private final AttributElements pAttribut;
	private final AccesElements eAcces;
	private final TypeElements pType;
	private final ProgramElements pProgram;
	private final MethodeElements pMethode;
	private final DelegationElements pDelegation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleJGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pClasse = new ClasseElements();
		this.pAttribut = new AttributElements();
		this.eAcces = new AccesElements();
		this.pType = new TypeElements();
		this.pProgram = new ProgramElements();
		this.pMethode = new MethodeElements();
		this.pDelegation = new DelegationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.paris10.miage.SimpleJ".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	classes+=Classe*
	//	program=Program?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	/// *
	// * herite=[Classe]
	// * A lieu de faire un validator pour s'assurer que le nom de classe hérité existe.
	// * On défini notre attribut hérite comme une référence vers une classe, on ne pourra ainsi accéder qu'aux classe définies
	// * dans le fichier de test.
	// * 
	// * / Classe:
	//	"class" name=ID ("(" attributs+=Attribut (',' attributs+=Attribut)*) ")"? (":" parent=[Classe])? (methodes+=Methode
	//	methodes+=Methode*)?;
	public ClasseElements getClasseAccess() {
		return pClasse;
	}
	
	public ParserRule getClasseRule() {
		return getClasseAccess().getRule();
	}
	
	//Attribut:
	//	acces=Acces? delegue=Delegation? name=ID ":" type=Type;
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}
	
	//enum Acces:
	//	accessVar="var" | accessConst="const" | accessHidden="hidden";
	public AccesElements getAccesAccess() {
		return eAcces;
	}
	
	public EnumRule getAccesRule() {
		return getAccesAccess().getRule();
	}
	
	//Type:
	//	name=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Program:
	//	"program" name=ID
	//	contenu=STRING;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Methode:
	//	"def" name=ID (":" type=Type)? ("(" attributs+=Attribut (',' attributs+=Attribut)* ")")?
	//	contenu=STRING;
	public MethodeElements getMethodeAccess() {
		return pMethode;
	}
	
	public ParserRule getMethodeRule() {
		return getMethodeAccess().getRule();
	}
	
	//Delegation:
	//	name=ID;
	public DelegationElements getDelegationAccess() {
		return pDelegation;
	}
	
	public ParserRule getDelegationRule() {
		return getDelegationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
